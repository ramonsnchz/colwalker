# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from flexi/flexi.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class flexi(genpy.Message):
  _md5sum = "52823d3067d94d638e3ddecc62e7832b"
  _type = "flexi/flexi"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """int32 x
int32 x2
int32 x3
int32 x4
int32 x5
int32 x6
int32 x7
int32 x8
int32 x9
int32 x10
int32 x11
int32 x12
int32 x13
int32 x14
int32 x15
int32 x16
"""
  __slots__ = ['x','x2','x3','x4','x5','x6','x7','x8','x9','x10','x11','x12','x13','x14','x15','x16']
  _slot_types = ['int32','int32','int32','int32','int32','int32','int32','int32','int32','int32','int32','int32','int32','int32','int32','int32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       x,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(flexi, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.x is None:
        self.x = 0
      if self.x2 is None:
        self.x2 = 0
      if self.x3 is None:
        self.x3 = 0
      if self.x4 is None:
        self.x4 = 0
      if self.x5 is None:
        self.x5 = 0
      if self.x6 is None:
        self.x6 = 0
      if self.x7 is None:
        self.x7 = 0
      if self.x8 is None:
        self.x8 = 0
      if self.x9 is None:
        self.x9 = 0
      if self.x10 is None:
        self.x10 = 0
      if self.x11 is None:
        self.x11 = 0
      if self.x12 is None:
        self.x12 = 0
      if self.x13 is None:
        self.x13 = 0
      if self.x14 is None:
        self.x14 = 0
      if self.x15 is None:
        self.x15 = 0
      if self.x16 is None:
        self.x16 = 0
    else:
      self.x = 0
      self.x2 = 0
      self.x3 = 0
      self.x4 = 0
      self.x5 = 0
      self.x6 = 0
      self.x7 = 0
      self.x8 = 0
      self.x9 = 0
      self.x10 = 0
      self.x11 = 0
      self.x12 = 0
      self.x13 = 0
      self.x14 = 0
      self.x15 = 0
      self.x16 = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_16i().pack(_x.x, _x.x2, _x.x3, _x.x4, _x.x5, _x.x6, _x.x7, _x.x8, _x.x9, _x.x10, _x.x11, _x.x12, _x.x13, _x.x14, _x.x15, _x.x16))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 64
      (_x.x, _x.x2, _x.x3, _x.x4, _x.x5, _x.x6, _x.x7, _x.x8, _x.x9, _x.x10, _x.x11, _x.x12, _x.x13, _x.x14, _x.x15, _x.x16,) = _get_struct_16i().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_16i().pack(_x.x, _x.x2, _x.x3, _x.x4, _x.x5, _x.x6, _x.x7, _x.x8, _x.x9, _x.x10, _x.x11, _x.x12, _x.x13, _x.x14, _x.x15, _x.x16))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 64
      (_x.x, _x.x2, _x.x3, _x.x4, _x.x5, _x.x6, _x.x7, _x.x8, _x.x9, _x.x10, _x.x11, _x.x12, _x.x13, _x.x14, _x.x15, _x.x16,) = _get_struct_16i().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_16i = None
def _get_struct_16i():
    global _struct_16i
    if _struct_16i is None:
        _struct_16i = struct.Struct("<16i")
    return _struct_16i
